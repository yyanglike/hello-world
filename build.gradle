plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.6.3"
    id("io.micronaut.aot") version "3.6.3"
    id('org.graalvm.buildtools.native') version '0.9.13'
}

version = "0.1"
group = "hello.world"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client")
    implementation('org.redisson:redisson-micronaut-30:3.18.0')
//    implementation("com.zaxxer:HikariCP:5.0.1")
//    runtimeOnly("mysql:mysql-connector-java")
    implementation("io.micronaut.nats:micronaut-nats")


    // https://mvnrepository.com/artifact/io.micronaut/micronaut-inject-java
    implementation("io.micronaut:micronaut-inject-java:3.7.4")


    compileOnly("org.graalvm.nativeimage:svm")

    annotationProcessor("io.micronaut.data:micronaut-data-hibernate-jpa")
    //database
    implementation("com.h2database:h2:2.1.210")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    runtimeOnly("io.micronaut.sql:micronaut-jdbc-hikari")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")

    annotationProcessor("io.micronaut.serde:micronaut-serde-processor:1.0.1")
    implementation('com.google.code.gson:gson:2.10')
    implementation('org.java-websocket:Java-WebSocket:1.5.4-SNAPSHOT')


    //openapi
    annotationProcessor("io.micronaut.openapi:micronaut-openapi:4.7.1")
    implementation("io.swagger.core.v3:swagger-annotations")

    //cache
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.cache:micronaut-cache-ehcache:3.5.0")
}


application {
    mainClass.set("hello.world.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
     aot {
         // Please review carefully the optimizations enabled below
         // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
         optimizeServiceLoading = true
         convertYamlToJava = true
         precomputeOperations = true
         cacheEnvironment = true
         optimizeClassLoading = true
         deduceEnvironment = true
         optimizeNetty = true
     }
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute(module("io.micronaut:micronaut-jackson-databind"))
                .using(module("io.micronaut.serde:micronaut-serde-jackson:1.0.1"))
    }
}

graalvmNative {
    agent {
        defaultMode = "standard"
    }
    binaries{
        main{
            buildArgs.add('--verbose')
//            buildArgs.add('--initialize-at-run-time=java.sql.DriverManager')
//            buildArgs.add('--initialize-at-build-time=java.sql.DriverManager')
//            buildArgs.add('--initialize-at-run-time=io.micronaut.core.graal.AutomaticFeatureUtils')
            // buildArgs.add('--gc=G1')
        }
    }
    metadataRepository {
        enabled = true
    }
    toolchainDetection = false
}


